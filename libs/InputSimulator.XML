<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InputSimulator</name>
    </assembly>
    <members>
        <member name="T:WindowsInput.XButton">
            <summary>
            XButton definitions for use in the MouseData property of the <see cref="T:WindowsInput.MOUSEINPUT"/> structure. (See: http://msdn.microsoft.com/en-us/library/ms646273(VS.85).aspx)
            </summary>
        </member>
        <member name="F:WindowsInput.XButton.XBUTTON1">
            <summary>
            Set if the first X button is pressed or released.
            </summary>
        </member>
        <member name="F:WindowsInput.XButton.XBUTTON2">
            <summary>
            Set if the second X button is pressed or released.
            </summary>
        </member>
        <member name="T:WindowsInput.MOUSEKEYBDHARDWAREINPUT">
            <summary>
            The combined/overlayed structure that includes Mouse, Keyboard and Hardware Input message data (see: http://msdn.microsoft.com/en-us/library/ms646270(VS.85).aspx)
            </summary>
        </member>
        <member name="T:WindowsInput.INPUT">
            <summary>
            The INPUT structure is used by SendInput to store information for synthesizing input events such as keystrokes, mouse movement, and mouse clicks. (see: http://msdn.microsoft.com/en-us/library/ms646270(VS.85).aspx)
            Declared in Winuser.h, include Windows.h
            </summary>
            <remarks>
            This structure contains information identical to that used in the parameter list of the keybd_event or mouse_event function.
            Windows 2000/XP: INPUT_KEYBOARD supports nonkeyboard input methods, such as handwriting recognition or voice recognition, as if it were text input by using the KEYEVENTF_UNICODE flag. For more information, see the remarks section of KEYBDINPUT.
            </remarks>
        </member>
        <member name="F:WindowsInput.INPUT.Type">
            <summary>
            Specifies the type of the input event. This member can be one of the following values. 
            InputType.MOUSE - The event is a mouse event. Use the mi structure of the union.
            InputType.KEYBOARD - The event is a keyboard event. Use the ki structure of the union.
            InputType.HARDWARE - Windows 95/98/Me: The event is from input hardware other than a keyboard or mouse. Use the hi structure of the union.
            </summary>
        </member>
        <member name="F:WindowsInput.INPUT.Data">
            <summary>
            The data structure that contains information about the simulated Mouse, Keyboard or Hardware event.
            </summary>
        </member>
        <member name="T:WindowsInput.VirtualKeyCode">
            <summary>
            The list of VirtualKeyCodes (see: http://msdn.microsoft.com/en-us/library/ms645540(VS.85).aspx)
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LBUTTON">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.RBUTTON">
            <summary>
            Right mouse button
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.CANCEL">
            <summary>
            Control-break processing
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MBUTTON">
            <summary>
            Middle mouse button (three-button mouse) - NOT contiguous with LBUTTON and RBUTTON
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.XBUTTON1">
            <summary>
            Windows 2000/XP: X1 mouse button - NOT contiguous with LBUTTON and RBUTTON
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.XBUTTON2">
            <summary>
            Windows 2000/XP: X2 mouse button - NOT contiguous with LBUTTON and RBUTTON
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BACK">
            <summary>
            BACKSPACE key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.TAB">
            <summary>
            TAB key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.CLEAR">
            <summary>
            CLEAR key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.RETURN">
            <summary>
            ENTER key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SHIFT">
            <summary>
            SHIFT key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.CONTROL">
            <summary>
            CTRL key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MENU">
            <summary>
            ALT key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.PAUSE">
            <summary>
            PAUSE key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.CAPITAL">
            <summary>
            CAPS LOCK key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.KANA">
            <summary>
            Input Method Editor (IME) Kana mode
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.HANGEUL">
            <summary>
            IME Hanguel mode (maintained for compatibility; use HANGUL)
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.HANGUL">
            <summary>
            IME Hangul mode
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.JUNJA">
            <summary>
            IME Junja mode
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.FINAL">
            <summary>
            IME final mode
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.HANJA">
            <summary>
            IME Hanja mode
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.KANJI">
            <summary>
            IME Kanji mode
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.ESCAPE">
            <summary>
            ESC key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.CONVERT">
            <summary>
            IME convert
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NONCONVERT">
            <summary>
            IME nonconvert
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.ACCEPT">
            <summary>
            IME accept
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MODECHANGE">
            <summary>
            IME mode change request
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SPACE">
            <summary>
            SPACEBAR
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.PRIOR">
            <summary>
            PAGE UP key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NEXT">
            <summary>
            PAGE DOWN key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.END">
            <summary>
            END key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.HOME">
            <summary>
            HOME key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LEFT">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.UP">
            <summary>
            UP ARROW key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.RIGHT">
            <summary>
            RIGHT ARROW key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.DOWN">
            <summary>
            DOWN ARROW key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SELECT">
            <summary>
            SELECT key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.PRINT">
            <summary>
            PRINT key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.EXECUTE">
            <summary>
            EXECUTE key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SNAPSHOT">
            <summary>
            PRINT SCREEN key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.INSERT">
            <summary>
            INS key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.DELETE">
            <summary>
            DEL key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.HELP">
            <summary>
            HELP key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_0">
            <summary>
            0 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_1">
            <summary>
            1 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_2">
            <summary>
            2 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_3">
            <summary>
            3 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_4">
            <summary>
            4 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_5">
            <summary>
            5 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_6">
            <summary>
            6 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_7">
            <summary>
            7 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_8">
            <summary>
            8 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_9">
            <summary>
            9 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_L">
            <summary>
            L key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_P">
            <summary>
            P key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_T">
            <summary>
            T key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_W">
            <summary>
            W key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VK_Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LWIN">
            <summary>
            Left Windows key (Microsoft Natural keyboard)
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.RWIN">
            <summary>
            Right Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.APPS">
            <summary>
            Applications key (Natural keyboard)
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SLEEP">
            <summary>
            Computer Sleep key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD0">
            <summary>
            Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD1">
            <summary>
            Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD2">
            <summary>
            Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD3">
            <summary>
            Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD4">
            <summary>
            Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD5">
            <summary>
            Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD6">
            <summary>
            Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD7">
            <summary>
            Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD8">
            <summary>
            Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMPAD9">
            <summary>
            Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MULTIPLY">
            <summary>
            Multiply key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.ADD">
            <summary>
            Add key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SEPARATOR">
            <summary>
            Separator key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SUBTRACT">
            <summary>
            Subtract key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.DECIMAL">
            <summary>
            Decimal key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.DIVIDE">
            <summary>
            Divide key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F1">
            <summary>
            F1 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F2">
            <summary>
            F2 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F3">
            <summary>
            F3 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F4">
            <summary>
            F4 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F5">
            <summary>
            F5 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F6">
            <summary>
            F6 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F7">
            <summary>
            F7 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F8">
            <summary>
            F8 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F9">
            <summary>
            F9 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F10">
            <summary>
            F10 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F11">
            <summary>
            F11 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F12">
            <summary>
            F12 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F13">
            <summary>
            F13 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F14">
            <summary>
            F14 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F15">
            <summary>
            F15 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F16">
            <summary>
            F16 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F17">
            <summary>
            F17 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F18">
            <summary>
            F18 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F19">
            <summary>
            F19 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F20">
            <summary>
            F20 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F21">
            <summary>
            F21 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F22">
            <summary>
            F22 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F23">
            <summary>
            F23 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.F24">
            <summary>
            F24 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NUMLOCK">
            <summary>
            NUM LOCK key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.SCROLL">
            <summary>
            SCROLL LOCK key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LSHIFT">
            <summary>
            Left SHIFT key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.RSHIFT">
            <summary>
            Right SHIFT key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LCONTROL">
            <summary>
            Left CONTROL key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.RCONTROL">
            <summary>
            Right CONTROL key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LMENU">
            <summary>
            Left MENU key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.RMENU">
            <summary>
            Right MENU key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BROWSER_BACK">
            <summary>
            Windows 2000/XP: Browser Back key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BROWSER_FORWARD">
            <summary>
            Windows 2000/XP: Browser Forward key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BROWSER_REFRESH">
            <summary>
            Windows 2000/XP: Browser Refresh key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BROWSER_STOP">
            <summary>
            Windows 2000/XP: Browser Stop key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BROWSER_SEARCH">
            <summary>
            Windows 2000/XP: Browser Search key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BROWSER_FAVORITES">
            <summary>
            Windows 2000/XP: Browser Favorites key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.BROWSER_HOME">
            <summary>
            Windows 2000/XP: Browser Start and Home key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VOLUME_MUTE">
            <summary>
            Windows 2000/XP: Volume Mute key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VOLUME_DOWN">
            <summary>
            Windows 2000/XP: Volume Down key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.VOLUME_UP">
            <summary>
            Windows 2000/XP: Volume Up key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MEDIA_NEXT_TRACK">
            <summary>
            Windows 2000/XP: Next Track key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MEDIA_PREV_TRACK">
            <summary>
            Windows 2000/XP: Previous Track key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MEDIA_STOP">
            <summary>
            Windows 2000/XP: Stop Media key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.MEDIA_PLAY_PAUSE">
            <summary>
            Windows 2000/XP: Play/Pause Media key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LAUNCH_MAIL">
            <summary>
            Windows 2000/XP: Start Mail key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LAUNCH_MEDIA_SELECT">
            <summary>
            Windows 2000/XP: Select Media key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LAUNCH_APP1">
            <summary>
            Windows 2000/XP: Start Application 1 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.LAUNCH_APP2">
            <summary>
            Windows 2000/XP: Start Application 2 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_1">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the ';:' key 
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_PLUS">
            <summary>
            Windows 2000/XP: For any country/region, the '+' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_COMMA">
            <summary>
            Windows 2000/XP: For any country/region, the ',' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_MINUS">
            <summary>
            Windows 2000/XP: For any country/region, the '-' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_PERIOD">
            <summary>
            Windows 2000/XP: For any country/region, the '.' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_2">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '/?' key 
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_3">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '`~' key 
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_4">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '[{' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_5">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '\|' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_6">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the ']}' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_7">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the 'single-quote/double-quote' key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_102">
            <summary>
            Windows 2000/XP: Either the angle bracket key or the backslash key on the RT 102-key keyboard
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.PROCESSKEY">
            <summary>
            Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.PACKET">
            <summary>
            Windows 2000/XP: Used to pass Unicode characters as if they were keystrokes. The PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.ATTN">
            <summary>
            Attn key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.CRSEL">
            <summary>
            CrSel key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.EXSEL">
            <summary>
            ExSel key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.EREOF">
            <summary>
            Erase EOF key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.PLAY">
            <summary>
            Play key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.ZOOM">
            <summary>
            Zoom key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.NONAME">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.PA1">
            <summary>
            PA1 key
            </summary>
        </member>
        <member name="F:WindowsInput.VirtualKeyCode.OEM_CLEAR">
            <summary>
            Clear key
            </summary>
        </member>
        <member name="T:WindowsInput.KeyboardFlag">
            <summary>
            Specifies various aspects of a keystroke. This member can be certain combinations of the following values.
            </summary>
        </member>
        <member name="F:WindowsInput.KeyboardFlag.EXTENDEDKEY">
            <summary>
            KEYEVENTF_EXTENDEDKEY = 0x0001 (If specified, the scan code was preceded by a prefix byte that has the value 0xE0 (224).)
            </summary>
        </member>
        <member name="F:WindowsInput.KeyboardFlag.KEYUP">
            <summary>
            KEYEVENTF_KEYUP = 0x0002 (If specified, the key is being released. If not specified, the key is being pressed.)
            </summary>
        </member>
        <member name="F:WindowsInput.KeyboardFlag.UNICODE">
            <summary>
            KEYEVENTF_UNICODE = 0x0004 (If specified, wScan identifies the key and wVk is ignored.)
            </summary>
        </member>
        <member name="F:WindowsInput.KeyboardFlag.SCANCODE">
            <summary>
            KEYEVENTF_SCANCODE = 0x0008 (Windows 2000/XP: If specified, the system synthesizes a VK_PACKET keystroke. The wVk parameter must be zero. This flag can only be combined with the KEYEVENTF_KEYUP flag. For more information, see the Remarks section.)
            </summary>
        </member>
        <member name="T:WindowsInput.KEYBDINPUT">
            <summary>
            The KEYBDINPUT structure contains information about a simulated keyboard event.  (see: http://msdn.microsoft.com/en-us/library/ms646271(VS.85).aspx)
            Declared in Winuser.h, include Windows.h
            </summary>
            <remarks>
            Windows 2000/XP: INPUT_KEYBOARD supports nonkeyboard-input methodssuch as handwriting recognition or voice recognitionas if it were text input by using the KEYEVENTF_UNICODE flag. If KEYEVENTF_UNICODE is specified, SendInput sends a WM_KEYDOWN or WM_KEYUP message to the foreground thread's message queue with wParam equal to VK_PACKET. Once GetMessage or PeekMessage obtains this message, passing the message to TranslateMessage posts a WM_CHAR message with the Unicode character originally specified by wScan. This Unicode character will automatically be converted to the appropriate ANSI value if it is posted to an ANSI window.
            Windows 2000/XP: Set the KEYEVENTF_SCANCODE flag to define keyboard input in terms of the scan code. This is useful to simulate a physical keystroke regardless of which keyboard is currently being used. The virtual key value of a key may alter depending on the current keyboard layout or what other keys were pressed, but the scan code will always be the same.
            </remarks>
        </member>
        <member name="F:WindowsInput.KEYBDINPUT.Vk">
            <summary>
            Specifies a virtual-key code. The code must be a value in the range 1 to 254. The Winuser.h header file provides macro definitions (VK_*) for each value. If the dwFlags member specifies KEYEVENTF_UNICODE, wVk must be 0. 
            </summary>
        </member>
        <member name="F:WindowsInput.KEYBDINPUT.Scan">
            <summary>
            Specifies a hardware scan code for the key. If dwFlags specifies KEYEVENTF_UNICODE, wScan specifies a Unicode character which is to be sent to the foreground application. 
            </summary>
        </member>
        <member name="F:WindowsInput.KEYBDINPUT.Flags">
            <summary>
            Specifies various aspects of a keystroke. This member can be certain combinations of the following values.
            KEYEVENTF_EXTENDEDKEY - If specified, the scan code was preceded by a prefix byte that has the value 0xE0 (224).
            KEYEVENTF_KEYUP - If specified, the key is being released. If not specified, the key is being pressed.
            KEYEVENTF_SCANCODE - If specified, wScan identifies the key and wVk is ignored. 
            KEYEVENTF_UNICODE - Windows 2000/XP: If specified, the system synthesizes a VK_PACKET keystroke. The wVk parameter must be zero. This flag can only be combined with the KEYEVENTF_KEYUP flag. For more information, see the Remarks section. 
            </summary>
        </member>
        <member name="F:WindowsInput.KEYBDINPUT.Time">
            <summary>
            Time stamp for the event, in milliseconds. If this parameter is zero, the system will provide its own time stamp. 
            </summary>
        </member>
        <member name="F:WindowsInput.KEYBDINPUT.ExtraInfo">
            <summary>
            Specifies an additional value associated with the keystroke. Use the GetMessageExtraInfo function to obtain this information. 
            </summary>
        </member>
        <member name="T:WindowsInput.InputType">
            <summary>
            Specifies the type of the input event. This member can be one of the following values. 
            </summary>
        </member>
        <member name="F:WindowsInput.InputType.MOUSE">
            <summary>
            INPUT_MOUSE = 0x00 (The event is a mouse event. Use the mi structure of the union.)
            </summary>
        </member>
        <member name="F:WindowsInput.InputType.KEYBOARD">
            <summary>
            INPUT_KEYBOARD = 0x01 (The event is a keyboard event. Use the ki structure of the union.)
            </summary>
        </member>
        <member name="F:WindowsInput.InputType.HARDWARE">
            <summary>
            INPUT_HARDWARE = 0x02 (Windows 95/98/Me: The event is from input hardware other than a keyboard or mouse. Use the hi structure of the union.)
            </summary>
        </member>
        <member name="T:WindowsInput.InputSimulator">
            <summary>
            Provides a useful wrapper around the User32 SendInput and related native Windows functions.
            </summary>
        </member>
        <member name="M:WindowsInput.InputSimulator.SendInput(System.UInt32,WindowsInput.INPUT[],System.Int32)">
            <summary>
            The SendInput function synthesizes keystrokes, mouse motions, and button clicks.
            </summary>
            <param name="numberOfInputs">Number of structures in the Inputs array.</param>
            <param name="inputs">Pointer to an array of INPUT structures. Each structure represents an event to be inserted into the keyboard or mouse input stream.</param>
            <param name="sizeOfInputStructure">Specifies the size, in bytes, of an INPUT structure. If cbSize is not the size of an INPUT structure, the function fails.</param>
            <returns>The function returns the number of events that it successfully inserted into the keyboard or mouse input stream. If the function returns zero, the input was already blocked by another thread. To get extended error information, call GetLastError.Microsoft Windows Vista. This function fails when it is blocked by User Interface Privilege Isolation (UIPI). Note that neither GetLastError nor the return value will indicate the failure was caused by UIPI blocking.</returns>
            <remarks>
            Microsoft Windows Vista. This function is subject to UIPI. Applications are permitted to inject input only into applications that are at an equal or lesser integrity level.
            The SendInput function inserts the events in the INPUT structures serially into the keyboard or mouse input stream. These events are not interspersed with other keyboard or mouse input events inserted either by the user (with the keyboard or mouse) or by calls to keybd_event, mouse_event, or other calls to SendInput.
            This function does not reset the keyboard's current state. Any keys that are already pressed when the function is called might interfere with the events that this function generates. To avoid this problem, check the keyboard's state with the GetAsyncKeyState function and correct as necessary.
            </remarks>
        </member>
        <member name="M:WindowsInput.InputSimulator.GetAsyncKeyState(System.UInt16)">
            <summary>
            The GetAsyncKeyState function determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState. (See: http://msdn.microsoft.com/en-us/library/ms646293(VS.85).aspx)
            </summary>
            <param name="virtualKeyCode">Specifies one of 256 possible virtual-key codes. For more information, see Virtual Key Codes. Windows NT/2000/XP: You can use left- and right-distinguishing constants to specify certain keys. See the Remarks section for further information.</param>
            <returns>
            If the function succeeds, the return value specifies whether the key was pressed since the last call to GetAsyncKeyState, and whether the key is currently up or down. If the most significant bit is set, the key is down, and if the least significant bit is set, the key was pressed after the previous call to GetAsyncKeyState. However, you should not rely on this last behavior; for more information, see the Remarks. 
            
            Windows NT/2000/XP: The return value is zero for the following cases: 
            - The current desktop is not the active desktop
            - The foreground thread belongs to another process and the desktop does not allow the hook or the journal record.
            
            Windows 95/98/Me: The return value is the global asynchronous key state for each virtual key. The system does not check which thread has the keyboard focus.
            
            Windows 95/98/Me: Windows 95 does not support the left- and right-distinguishing constants. If you call GetAsyncKeyState with these constants, the return value is zero. 
            </returns>
            <remarks>
            The GetAsyncKeyState function works with mouse buttons. However, it checks on the state of the physical mouse buttons, not on the logical mouse buttons that the physical buttons are mapped to. For example, the call GetAsyncKeyState(VK_LBUTTON) always returns the state of the left physical mouse button, regardless of whether it is mapped to the left or right logical mouse button. You can determine the system's current mapping of physical mouse buttons to logical mouse buttons by calling 
            Copy CodeGetSystemMetrics(SM_SWAPBUTTON) which returns TRUE if the mouse buttons have been swapped.
            
            Although the least significant bit of the return value indicates whether the key has been pressed since the last query, due to the pre-emptive multitasking nature of Windows, another application can call GetAsyncKeyState and receive the "recently pressed" bit instead of your application. The behavior of the least significant bit of the return value is retained strictly for compatibility with 16-bit Windows applications (which are non-preemptive) and should not be relied upon.
            
            You can use the virtual-key code constants VK_SHIFT, VK_CONTROL, and VK_MENU as values for the vKey parameter. This gives the state of the SHIFT, CTRL, or ALT keys without distinguishing between left and right. 
            
            Windows NT/2000/XP: You can use the following virtual-key code constants as values for vKey to distinguish between the left and right instances of those keys. 
            
            Code Meaning 
            VK_LSHIFT Left-shift key. 
            VK_RSHIFT Right-shift key. 
            VK_LCONTROL Left-control key. 
            VK_RCONTROL Right-control key. 
            VK_LMENU Left-menu key. 
            VK_RMENU Right-menu key. 
            
            These left- and right-distinguishing constants are only available when you call the GetKeyboardState, SetKeyboardState, GetAsyncKeyState, GetKeyState, and MapVirtualKey functions. 
            </remarks>
        </member>
        <member name="M:WindowsInput.InputSimulator.GetKeyState(System.UInt16)">
            <summary>
            The GetKeyState function retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, off alternating each time the key is pressed). (See: http://msdn.microsoft.com/en-us/library/ms646301(VS.85).aspx)
            </summary>
            <param name="virtualKeyCode">
            Specifies a virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0 through 9), nVirtKey must be set to the ASCII value of that character. For other keys, it must be a virtual-key code. 
            If a non-English keyboard layout is used, virtual keys with values in the range ASCII A through Z and 0 through 9 are used to specify most of the character keys. For example, for the German keyboard layout, the virtual key of value ASCII O (0x4F) refers to the "o" key, whereas VK_OEM_1 refers to the "o with umlaut" key.
            </param>
            <returns>
            The return value specifies the status of the specified virtual key, as follows: 
            If the high-order bit is 1, the key is down; otherwise, it is up.
            If the low-order bit is 1, the key is toggled. A key, such as the CAPS LOCK key, is toggled if it is turned on. The key is off and untoggled if the low-order bit is 0. A toggle key's indicator light (if any) on the keyboard will be on when the key is toggled, and off when the key is untoggled.
            </returns>
            <remarks>
            The key status returned from this function changes as a thread reads key messages from its message queue. The status does not reflect the interrupt-level state associated with the hardware. Use the GetAsyncKeyState function to retrieve that information. 
            An application calls GetKeyState in response to a keyboard-input message. This function retrieves the state of the key when the input message was generated. 
            To retrieve state information for all the virtual keys, use the GetKeyboardState function. 
            An application can use the virtual-key code constants VK_SHIFT, VK_CONTROL, and VK_MENU as values for the nVirtKey parameter. This gives the status of the SHIFT, CTRL, or ALT keys without distinguishing between left and right. An application can also use the following virtual-key code constants as values for nVirtKey to distinguish between the left and right instances of those keys. 
            VK_LSHIFT
            VK_RSHIFT
            VK_LCONTROL
            VK_RCONTROL
            VK_LMENU
            VK_RMENU
            
            These left- and right-distinguishing constants are available to an application only through the GetKeyboardState, SetKeyboardState, GetAsyncKeyState, GetKeyState, and MapVirtualKey functions. 
            </remarks>
        </member>
        <member name="M:WindowsInput.InputSimulator.GetMessageExtraInfo">
            <summary>
            The GetMessageExtraInfo function retrieves the extra message information for the current thread. Extra message information is an application- or driver-defined value associated with the current thread's message queue. 
            </summary>
            <returns></returns>
            <remarks>To set a thread's extra message information, use the SetMessageExtraInfo function. </remarks>
        </member>
        <member name="M:WindowsInput.InputSimulator.IsKeyDownAsync(WindowsInput.VirtualKeyCode)">
            <summary>
            Determines whether a key is up or down at the time the function is called by calling the GetAsyncKeyState function. (See: http://msdn.microsoft.com/en-us/library/ms646293(VS.85).aspx)
            </summary>
            <param name="keyCode">The key code.</param>
            <returns>
            	<c>true</c> if the key is down; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The GetAsyncKeyState function works with mouse buttons. However, it checks on the state of the physical mouse buttons, not on the logical mouse buttons that the physical buttons are mapped to. For example, the call GetAsyncKeyState(VK_LBUTTON) always returns the state of the left physical mouse button, regardless of whether it is mapped to the left or right logical mouse button. You can determine the system's current mapping of physical mouse buttons to logical mouse buttons by calling 
            Copy CodeGetSystemMetrics(SM_SWAPBUTTON) which returns TRUE if the mouse buttons have been swapped.
            
            Although the least significant bit of the return value indicates whether the key has been pressed since the last query, due to the pre-emptive multitasking nature of Windows, another application can call GetAsyncKeyState and receive the "recently pressed" bit instead of your application. The behavior of the least significant bit of the return value is retained strictly for compatibility with 16-bit Windows applications (which are non-preemptive) and should not be relied upon.
            
            You can use the virtual-key code constants VK_SHIFT, VK_CONTROL, and VK_MENU as values for the vKey parameter. This gives the state of the SHIFT, CTRL, or ALT keys without distinguishing between left and right. 
            
            Windows NT/2000/XP: You can use the following virtual-key code constants as values for vKey to distinguish between the left and right instances of those keys. 
            
            Code Meaning 
            VK_LSHIFT Left-shift key. 
            VK_RSHIFT Right-shift key. 
            VK_LCONTROL Left-control key. 
            VK_RCONTROL Right-control key. 
            VK_LMENU Left-menu key. 
            VK_RMENU Right-menu key. 
            
            These left- and right-distinguishing constants are only available when you call the GetKeyboardState, SetKeyboardState, GetAsyncKeyState, GetKeyState, and MapVirtualKey functions. 
            </remarks>
        </member>
        <member name="M:WindowsInput.InputSimulator.IsKeyDown(WindowsInput.VirtualKeyCode)">
            <summary>
            Determines whether the specified key is up or down by calling the GetKeyState function. (See: http://msdn.microsoft.com/en-us/library/ms646301(VS.85).aspx)
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
            <returns>
            	<c>true</c> if the key is down; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The key status returned from this function changes as a thread reads key messages from its message queue. The status does not reflect the interrupt-level state associated with the hardware. Use the GetAsyncKeyState function to retrieve that information. 
            An application calls GetKeyState in response to a keyboard-input message. This function retrieves the state of the key when the input message was generated. 
            To retrieve state information for all the virtual keys, use the GetKeyboardState function. 
            An application can use the virtual-key code constants VK_SHIFT, VK_CONTROL, and VK_MENU as values for the nVirtKey parameter. This gives the status of the SHIFT, CTRL, or ALT keys without distinguishing between left and right. An application can also use the following virtual-key code constants as values for nVirtKey to distinguish between the left and right instances of those keys. 
            VK_LSHIFT
            VK_RSHIFT
            VK_LCONTROL
            VK_RCONTROL
            VK_LMENU
            VK_RMENU
            
            These left- and right-distinguishing constants are available to an application only through the GetKeyboardState, SetKeyboardState, GetAsyncKeyState, GetKeyState, and MapVirtualKey functions. 
            </remarks>
        </member>
        <member name="M:WindowsInput.InputSimulator.IsTogglingKeyInEffect(WindowsInput.VirtualKeyCode)">
            <summary>
            Determines whether the toggling key is toggled on (in-effect) or not by calling the GetKeyState function.  (See: http://msdn.microsoft.com/en-us/library/ms646301(VS.85).aspx)
            </summary>
            <param name="keyCode">The <see cref="T:WindowsInput.VirtualKeyCode"/> for the key.</param>
            <returns>
            	<c>true</c> if the toggling key is toggled on (in-effect); otherwise, <c>false</c>.
            </returns>
            <remarks>
            The key status returned from this function changes as a thread reads key messages from its message queue. The status does not reflect the interrupt-level state associated with the hardware. Use the GetAsyncKeyState function to retrieve that information. 
            An application calls GetKeyState in response to a keyboard-input message. This function retrieves the state of the key when the input message was generated. 
            To retrieve state information for all the virtual keys, use the GetKeyboardState function. 
            An application can use the virtual-key code constants VK_SHIFT, VK_CONTROL, and VK_MENU as values for the nVirtKey parameter. This gives the status of the SHIFT, CTRL, or ALT keys without distinguishing between left and right. An application can also use the following virtual-key code constants as values for nVirtKey to distinguish between the left and right instances of those keys. 
            VK_LSHIFT
            VK_RSHIFT
            VK_LCONTROL
            VK_RCONTROL
            VK_LMENU
            VK_RMENU
            
            These left- and right-distinguishing constants are available to an application only through the GetKeyboardState, SetKeyboardState, GetAsyncKeyState, GetKeyState, and MapVirtualKey functions. 
            </remarks>
        </member>
        <member name="M:WindowsInput.InputSimulator.SimulateKeyDown(WindowsInput.VirtualKeyCode)">
            <summary>
            Calls the Win32 SendInput method to simulate a Key DOWN.
            </summary>
            <param name="keyCode">The VirtualKeyCode to press</param>
        </member>
        <member name="M:WindowsInput.InputSimulator.SimulateKeyUp(WindowsInput.VirtualKeyCode)">
            <summary>
            Calls the Win32 SendInput method to simulate a Key UP.
            </summary>
            <param name="keyCode">The VirtualKeyCode to lift up</param>
        </member>
        <member name="M:WindowsInput.InputSimulator.SimulateKeyPress(WindowsInput.VirtualKeyCode)">
            <summary>
            Calls the Win32 SendInput method with a KeyDown and KeyUp message in the same input sequence in order to simulate a Key PRESS.
            </summary>
            <param name="keyCode">The VirtualKeyCode to press</param>
        </member>
        <member name="M:WindowsInput.InputSimulator.SimulateTextEntry(System.String)">
            <summary>
            Calls the Win32 SendInput method with a stream of KeyDown and KeyUp messages in order to simulate uninterrupted text entry via the keyboard.
            </summary>
            <param name="text">The text to be simulated.</param>
        </member>
        <member name="M:WindowsInput.InputSimulator.SimulateModifiedKeyStroke(WindowsInput.VirtualKeyCode,WindowsInput.VirtualKeyCode)">
            <summary>
            Performs a simple modified keystroke like CTRL-C where CTRL is the modifierKey and C is the key.
            The flow is Modifier KEYDOWN, Key PRESS, Modifier KEYUP.
            </summary>
            <param name="modifierKeyCode">The modifier key</param>
            <param name="keyCode">The key to simulate</param>
        </member>
        <member name="M:WindowsInput.InputSimulator.SimulateModifiedKeyStroke(System.Collections.Generic.IEnumerable{WindowsInput.VirtualKeyCode},WindowsInput.VirtualKeyCode)">
            <summary>
            Performs a modified keystroke where there are multiple modifiers and one key like CTRL-ALT-C where CTRL and ALT are the modifierKeys and C is the key.
            The flow is Modifiers KEYDOWN in order, Key PRESS, Modifiers KEYUP in reverse order.
            </summary>
            <param name="modifierKeyCodes">The list of modifier keys</param>
            <param name="keyCode">The key to simulate</param>
        </member>
        <member name="M:WindowsInput.InputSimulator.SimulateModifiedKeyStroke(WindowsInput.VirtualKeyCode,System.Collections.Generic.IEnumerable{WindowsInput.VirtualKeyCode})">
            <summary>
            Performs a modified keystroke where there is one modifier and multiple keys like CTRL-K-C where CTRL is the modifierKey and K and C are the keys.
            The flow is Modifier KEYDOWN, Keys PRESS in order, Modifier KEYUP.
            </summary>
            <param name="modifierKey">The modifier key</param>
            <param name="keyCodes">The list of keys to simulate</param>
        </member>
        <member name="M:WindowsInput.InputSimulator.SimulateModifiedKeyStroke(System.Collections.Generic.IEnumerable{WindowsInput.VirtualKeyCode},System.Collections.Generic.IEnumerable{WindowsInput.VirtualKeyCode})">
            <summary>
            Performs a modified keystroke where there are multiple modifiers and multiple keys like CTRL-ALT-K-C where CTRL and ALT are the modifierKeys and K and C are the keys.
            The flow is Modifiers KEYDOWN in order, Keys PRESS in order, Modifiers KEYUP in reverse order.
            </summary>
            <param name="modifierKeyCodes">The list of modifier keys</param>
            <param name="keyCodes">The list of keys to simulate</param>
        </member>
        <member name="T:WindowsInput.MOUSEINPUT">
            <summary>
            The MOUSEINPUT structure contains information about a simulated mouse event. (see: http://msdn.microsoft.com/en-us/library/ms646273(VS.85).aspx)
            Declared in Winuser.h, include Windows.h
            </summary>
            <remarks>
            If the mouse has moved, indicated by MOUSEEVENTF_MOVE, dxand dy specify information about that movement. The information is specified as absolute or relative integer values. 
            If MOUSEEVENTF_ABSOLUTE value is specified, dx and dy contain normalized absolute coordinates between 0 and 65,535. The event procedure maps these coordinates onto the display surface. Coordinate (0,0) maps onto the upper-left corner of the display surface; coordinate (65535,65535) maps onto the lower-right corner. In a multimonitor system, the coordinates map to the primary monitor. 
            Windows 2000/XP: If MOUSEEVENTF_VIRTUALDESK is specified, the coordinates map to the entire virtual desktop.
            If the MOUSEEVENTF_ABSOLUTE value is not specified, dxand dy specify movement relative to the previous mouse event (the last reported position). Positive values mean the mouse moved right (or down); negative values mean the mouse moved left (or up). 
            Relative mouse motion is subject to the effects of the mouse speed and the two-mouse threshold values. A user sets these three values with the Pointer Speed slider of the Control Panel's Mouse Properties sheet. You can obtain and set these values using the SystemParametersInfo function. 
            The system applies two tests to the specified relative mouse movement. If the specified distance along either the x or y axis is greater than the first mouse threshold value, and the mouse speed is not zero, the system doubles the distance. If the specified distance along either the x or y axis is greater than the second mouse threshold value, and the mouse speed is equal to two, the system doubles the distance that resulted from applying the first threshold test. It is thus possible for the system to multiply specified relative mouse movement along the x or y axis by up to four times.
            </remarks>
        </member>
        <member name="F:WindowsInput.MOUSEINPUT.X">
            <summary>
            Specifies the absolute position of the mouse, or the amount of motion since the last mouse event was generated, depending on the value of the dwFlags member. Absolute data is specified as the x coordinate of the mouse; relative data is specified as the number of pixels moved. 
            </summary>
        </member>
        <member name="F:WindowsInput.MOUSEINPUT.Y">
            <summary>
            Specifies the absolute position of the mouse, or the amount of motion since the last mouse event was generated, depending on the value of the dwFlags member. Absolute data is specified as the y coordinate of the mouse; relative data is specified as the number of pixels moved. 
            </summary>
        </member>
        <member name="F:WindowsInput.MOUSEINPUT.MouseData">
            <summary>
            If dwFlags contains MOUSEEVENTF_WHEEL, then mouseData specifies the amount of wheel movement. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. One wheel click is defined as WHEEL_DELTA, which is 120. 
            Windows Vista: If dwFlags contains MOUSEEVENTF_HWHEEL, then dwData specifies the amount of wheel movement. A positive value indicates that the wheel was rotated to the right; a negative value indicates that the wheel was rotated to the left. One wheel click is defined as WHEEL_DELTA, which is 120.
            Windows 2000/XP: IfdwFlags does not contain MOUSEEVENTF_WHEEL, MOUSEEVENTF_XDOWN, or MOUSEEVENTF_XUP, then mouseData should be zero. 
            If dwFlags contains MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP, then mouseData specifies which X buttons were pressed or released. This value may be any combination of the following flags. 
            </summary>
        </member>
        <member name="F:WindowsInput.MOUSEINPUT.Flags">
            <summary>
            A set of bit flags that specify various aspects of mouse motion and button clicks. The bits in this member can be any reasonable combination of the following values. 
            The bit flags that specify mouse button status are set to indicate changes in status, not ongoing conditions. For example, if the left mouse button is pressed and held down, MOUSEEVENTF_LEFTDOWN is set when the left button is first pressed, but not for subsequent motions. Similarly, MOUSEEVENTF_LEFTUP is set only when the button is first released. 
            You cannot specify both the MOUSEEVENTF_WHEEL flag and either MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP flags simultaneously in the dwFlags parameter, because they both require use of the mouseData field. 
            </summary>
        </member>
        <member name="F:WindowsInput.MOUSEINPUT.Time">
            <summary>
            Time stamp for the event, in milliseconds. If this parameter is 0, the system will provide its own time stamp. 
            </summary>
        </member>
        <member name="F:WindowsInput.MOUSEINPUT.ExtraInfo">
            <summary>
            Specifies an additional value associated with the mouse event. An application calls GetMessageExtraInfo to obtain this extra information. 
            </summary>
        </member>
        <member name="T:WindowsInput.MouseFlag">
            <summary>
            The set of MouseFlags for use in the Flags property of the <see cref="T:WindowsInput.MOUSEINPUT"/> structure. (See: http://msdn.microsoft.com/en-us/library/ms646273(VS.85).aspx)
            </summary>
        </member>
        <member name="F:WindowsInput.MouseFlag.MOVE">
            <summary>
            Specifies that movement occurred.
            </summary>
        </member>
        <member name="F:WindowsInput.MouseFlag.LEFTDOWN">
            <summary>
            Specifies that the left button was pressed.
            </summary>
        </member>
        <member name="F:WindowsInput.MouseFlag.LEFTUP">
            <summary>
            Specifies that the left button was released.
            </summary>
        </member>
        <member name="F:WindowsInput.MouseFlag.RIGHTDOWN">
            <summary>
            Specifies that the right button was pressed.
            </summary>
        </member>
        <member name="F:WindowsInput.MouseFlag.RIGHTUP">
            <summary>
            Specifies that the right button was released.
            </summary>
        </member>
        <member name="F:WindowsInput.MouseFlag.MIDDLEDOWN">
            <summary>
            Specifies that the middle button was pressed.
            </summary>
        </member>
        <member name="F:WindowsInput.MouseFlag.MIDDLEUP">
            <summary>
            Specifies that the middle button was released.
            </summary>
        </member>
        <member name="F:WindowsInput.MouseFlag.XDOWN">
            <summary>
            Windows 2000/XP: Specifies that an X button was pressed.
            </summary>
        </member>
        <member name="F:WindowsInput.MouseFlag.XUP">
            <summary>
            Windows 2000/XP: Specifies that an X button was released.
            </summary>
        </member>
        <member name="F:WindowsInput.MouseFlag.WHEEL">
            <summary>
            Windows NT/2000/XP: Specifies that the wheel was moved, if the mouse has a wheel. The amount of movement is specified in mouseData. 
            </summary>
        </member>
        <member name="F:WindowsInput.MouseFlag.VIRTUALDESK">
            <summary>
            Windows 2000/XP: Maps coordinates to the entire desktop. Must be used with MOUSEEVENTF_ABSOLUTE.
            </summary>
        </member>
        <member name="F:WindowsInput.MouseFlag.ABSOLUTE">
            <summary>
            Specifies that the dx and dy members contain normalized absolute coordinates. If the flag is not set, dxand dy contain relative data (the change in position since the last reported position). This flag can be set, or not set, regardless of what kind of mouse or other pointing device, if any, is connected to the system. For further information about relative mouse motion, see the following Remarks section.
            </summary>
        </member>
        <member name="T:WindowsInput.HARDWAREINPUT">
            <summary>
            The HARDWAREINPUT structure contains information about a simulated message generated by an input device other than a keyboard or mouse.  (see: http://msdn.microsoft.com/en-us/library/ms646269(VS.85).aspx)
            Declared in Winuser.h, include Windows.h
            </summary>
        </member>
        <member name="F:WindowsInput.HARDWAREINPUT.Msg">
            <summary>
            Value specifying the message generated by the input hardware. 
            </summary>
        </member>
        <member name="F:WindowsInput.HARDWAREINPUT.ParamL">
            <summary>
            Specifies the low-order word of the lParam parameter for uMsg. 
            </summary>
        </member>
        <member name="F:WindowsInput.HARDWAREINPUT.ParamH">
            <summary>
            Specifies the high-order word of the lParam parameter for uMsg. 
            </summary>
        </member>
    </members>
</doc>
